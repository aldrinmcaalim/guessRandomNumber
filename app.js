// Plan
// grab all the classes
const guessField = document.querySelector(".guessField");
const guessSubmit = document.querySelector(".guessSubmit");

const guesses = document.querySelector(".guesses");
const lastResult = document.querySelector(".lastResult");
const lowOrHi = document.querySelector(".lowOrHi");

let counter = 1; // make sure to count user turns
let resetButton;

let randomNumber = Math.floor(Math.random() * 100) + 1; // create a random number

// function that checks user's guesses compared to random number with certain behaviors depending on turns left, getting it all wrong after no more turns left, if you still have turns left it gives hints if your number is too big or small, and outputs a victory if user gets it right

guessSubmit.addEventListener("click", setParameters);

function setParameters() {
  let userGuess = Number(guessField.value); // stores whatever value is found on the class of guessField

  // if the guessCount is equal to one, then run the block of code
  if (counter === 1) {
    guesses.textContent = "Previous guesses: ";
  }

  guesses.textContent += userGuess + " "; // gotta use textContent to allow for the space to occur

  // check to see if user guess === random number generated by computer
  if (userGuess === randomNumber) {
    lastResult.textContent = "Congratulations! You are correct!"; // output congrats message onto document which is currently hidden
    lastResult.style.backgroundColor = "rgb(0, 182, 30)"; // make the background color of lastResult green
    resetGame(); // invoke this function to run it

    // check to see if guessCount is equal to 10
  } else if (counter === 10) {
    lastResult.textContent = "GAME OVER"; // output 'game over' on the element with the class of lastResult

    lowOrHi.textContent = `The number was ${randomNumber}...`;
    resetGame(); // invoke this function to run it

    // catches every other condition not explicity stated
  } else {
    lastResult.style.backgroundColor = "rgb(255, 47, 47)"; // makes the output background color of the element with the class 'lastResult' to be red
    lastResult.textContent = "That's not right..."; // outputs 'that's not right' on the element with the class 'lastResult'

    // in the else block, if user guess is less than random number, output block of code
    if (userGuess < randomNumber) {
      lowOrHi.textContent = `${userGuess} is too low!`; // outputs '${userGuess} too low' onto element that has the class of "lowOrHi"

      // in the else block, if user guess is greater than the random number, output block of code
    } else if (userGuess > randomNumber) {
      lowOrHi.textContent = `${userGuess} is too high!`; // output '${userGuess} too high' onto element with class of "lowOrHi"
    }
  }
  counter++; // increments the count to check how many turns the player has had
  guessField.value = ""; // empties guess field form
  guessField.focus(); // focuses on the element with the class of guessField
}

// create a function that allows us to restart the game
function resetGame() {
  // originally, i had both guessField.disabled and guessSubmit.disabled in the function of setParameters with the if statement that cheks for userGuess === randomNumber as well as counter === 10, but to make the code with the DRY principle, it's best to just use the resetGame() function as a way to bridge that gap between the "if" and the "else if"
  guessField.disabled = true; // disables the input
  guessSubmit.disabled = true; // disables the submit button
  resetButton = document.createElement("button"); // create new element of 'button', name it resetButton
  resetButton.textContent = "RESET GAME"; // after creating the new element you should name it by giving it textContent or innerText or innerHTML
  document.body.append(resetButton); // creating the element and naming it is just as good as having an idea and not putting it into action. it's nothing more than theory, but by appending it onto the document.body, we are able to append the resetButton onto the actual page
  resetButton.addEventListener("click", clearFields); // but a button is something we click, so adding an event listener with click as well as a behavior to it makes sense
}

// behavior is to reset the background information, such as the guessCount and the hints shown once the game begins, we also create a new random number
function clearFields() {
  counter = 1; // resets count to 1
  guessField.disabled = false; // enables the user to interact with the guessField again
  guessSubmit.disabled = false; // enables the user to interact with the guessSubmit again
  guessField.focus(); // focuses on the element with the class of guessField

  resetButton.parentNode.removeChild(resetButton); // remove the reset button from the code
  lastResult.style.backgroundColor = "white"; // changes the background color of the element with the class of lastResult to white

  // You can grab each individual paragraph with their own classes, but a better way is to make them into a pseudo-array and loop through them
  // lastResult.textContent = "";
  // guesses.textContent = "";
  // lowOrHi.textContent = "";

  // here is the use of the pseudo-array and looping through them
  const resultParagraphs = document.querySelectorAll(".resultParagraphs p"); // grabs all paragraphs found within the class of resultParagraphs
  // for (let i = 0; i < resultParagraphs.length; i++) {
  //   resultParagraphs[i].textContent = "";
  // }

  // a more functional way is to still use the pseudo-array we made using querySelectorAll, but this time use the forEach method which is just looping but with less steps
  resultParagraphs.forEach((resultParagraph) => {
    resultParagraph.textContent = "";
  });

  randomNumber = Math.floor(Math.random() * 100) + 1; // allows us to instantly reset the randomNumber value, if we didn't do this then the random number would be the exact same number when we use the reset game button
}
